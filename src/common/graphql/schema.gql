# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type TypeRewardModel {
  id: Int!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type RewardModel {
  id: Int!
  name: String!
  description: String!
  typeRewardId: Int!
  url: String
  TypeReward: TypeRewardModel
  created_at: DateTime!
  updated_at: DateTime!
}

type AchievementModel {
  id: Int!
  rewardId: Int!
  userId: Int!
  RewardModel: RewardModel!
  created_at: DateTime!
  updated_at: DateTime!
  Reward: [RewardModel!]
}

type RankModel {
  id: Int!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type UserModel {
  id: Int!
  login: String!
  firstName: String!
  name: String!
  role: String!
  rankId: Int!
  Rank: RankModel
  Achievement: [AchievementModel]
  created_at: DateTime!
  updated_at: DateTime!
}

type TypeFileModel {
  id: Int!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type TheoryMaterialModel {
  id: Int!
  url: String!
  description: String!
  usage: Boolean!
  subtopicId: Int!
  typeFileId: Int!
  TypeFile: TypeFileModel!
  created_at: DateTime!
  updated_at: DateTime!
}

type SubtopicModel {
  id: Int!
  name: String!
  topicId: Int!
  TheoryMaterial(idTypeFile: Float): [TheoryMaterialModel!]
  created_at: DateTime!
  updated_at: DateTime!
}

type FileAnswerModel {
  id: Int!
  url: String!
  answerId: Int!
  created_at: DateTime!
  updated_at: DateTime!
}

type AnswerModel {
  id: Int!
  text: String!
  correct: String
  questionId: Int!
  FileAnswer: [FileAnswerModel!]!
  created_at: DateTime!
  updated_at: DateTime!
}

type PracticMaterialModel {
  id: Int!
  url: String!
  questionId: Int!
  typeFileId: Int!
  TypeFile: TypeFileModel!
  created_at: DateTime!
  updated_at: DateTime!
}

type ResponceTemplateModel {
  id: Int!
  text: String!
  questionId: Int!
  created_at: DateTime!
  updated_at: DateTime!
}

type TypeMiniGameModel {
  id: Int!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type TypeTaskModel {
  id: Int!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type QuestionModel {
  id: Int!
  text: String!
  topicId: Int!
  Topic: TopicModel!
  Answer: [AnswerModel!]!
  ResponceTemplate: ResponceTemplateModel
  PracticMaterial: [PracticMaterialModel!]!
  typeTaskId: Int!
  TypeTask: TypeTaskModel!
  typeMiniGameId: Int!
  TypeMiniGame: TypeMiniGameModel!
  scaleImportantId: Int!
  created_at: DateTime!
  updated_at: DateTime!
}

type Count {
  Question: Int!
}

type TopicModel {
  id: Int!
  name: String!
  disciplinaId: Int!
  Subtopic: [SubtopicModel!]
  Question: [QuestionModel!]
  created_at: DateTime!
  updated_at: DateTime!
  _count: Count!
}

type QuestionAllOutput {
  totalCount: Int!
  Questions: [QuestionModel!]!
}

type Query {
  getUserOne(id: Int!): UserModel!
  getRankAll: [RankModel!]!
  getAchievmentAll(rewardId: Int, userId: Int): [AchievementModel!]!
  getRewardAll: [RewardModel!]!
  getRewardByType(id: Int!): [RewardModel!]!
  getRewardAOne(id: Int!): RewardModel!
  getTypeRewardAll: [TypeRewardModel!]!
  getTopicAll: [TopicModel!]!
  getTopicOne(id: Float!): TopicModel!
  getSubtopicAllByTopic(topicId: Int): [SubtopicModel!]!
  getSubtopicOne(id: Float!): SubtopicModel!
  getAllTheoryMaterial(subtopicId: Int, typeFileId: Int): TheoryMaterialModel!
  getTypeFileAll: [TypeFileModel!]!
  getQuestionAll(take: Int, random: Boolean, scaleImportantId: Int, topicId: Int, typeMiniGameId: Int, typeTaskId: Int): QuestionAllOutput!
  getQuestionAOne(id: Int!): QuestionModel!
  getTypeTaskAll: [TypeTaskModel!]!
  getMiniGameAll: [TypeMiniGameModel!]!
  getAllPracticMaterial(questionId: Int, typeFileId: Int): PracticMaterialModel!
}

type Mutation {
  updateUser(updateUserData: UpdateUserInput!): UserModel!
  updatePassword(password: String!): UserModel!
  updateRole(userId: Int!, role: String!): UserModel!
  deleteAccount: UserModel!
  createRank(name: String!): RankModel!
  updateRank(name: String!, id: Int!): RankModel!
  deleteRank(id: Int!): RankModel!
  createAchievment(createAchievmentData: CreateUpdateAchievmentInput!): AchievementModel!
  updateTopic(updateTopicData: UpdateTopicInput!): TopicModel!
  deleteAchievment(id: Int!): AchievementModel!
  createReward(createRewardData: CreateUpdateRewardInput!): RewardModel!
  updateReward(id: Int!, updateRewardData: CreateUpdateRewardInput!): RewardModel!
  deleteReward(id: Int!): RewardModel!
  createTypeReward(name: String!): TypeRewardModel!
  updateTypeReward(name: String!, id: Int!): TypeRewardModel!
  deleteTypeReward(id: Int!): TypeRewardModel!
  createTopic(name: String!, disciplinaId: Int): TopicModel!
  deleteTopic(id: Int!): TopicModel!
  createSubtopic(name: String!, topicId: Int): SubtopicModel!
  updateTheoryMaterialId(idFiles: [Int!]!, idSubtopic: Int!): Int!
  deleteTheoryMaterial(id: Int!): TheoryMaterialModel!
  createQuestion(createQuestionData: CreateQuestionInput!): QuestionModel!
  updateQuestion(updateResponceTemplateData: UpdateResponceTemplateInput!): ResponceTemplateModel!
  deleteQuestion(id: Int!, questionId: Int!): ResponceTemplateModel!
  createTypeTask(name: String!): TypeTaskModel!
  updateTypeTask(name: String!, id: Int!): TypeTaskModel!
  deleteTypeTask(id: Int!): TypeTaskModel!
  deleteFileAnswer(id: Int!): FileAnswerModel!
  updatePracticMaterialId(idFiles: [Int!]!, idQuestion: Int!): Int!
  deletePracticMaterial(id: Int!): PracticMaterialModel!
}

input UpdateUserInput {
  login: String!
}

input CreateUpdateAchievmentInput {
  rewardId: Int!
  userId: Int!
}

input UpdateTopicInput {
  name: String
  disciplinaId: Int
  id: Int!
}

input CreateUpdateRewardInput {
  name: String!
  description: String!
  typeRewardId: Int!
}

input CreateQuestionInput {
  text: String!
  scaleImportantId: Int
  topicId: Int!
  typeMiniGameId: Int!
  typeTaskId: Int!
  Answer: [CreateAnswerInput!]!
  ResponceTemplate: [CreateResponceTemplateInput!]!
}

input CreateAnswerInput {
  text: String!
  correct: String!
}

input CreateResponceTemplateInput {
  text: String!
}

input UpdateResponceTemplateInput {
  id: Int!
  text: String!
  questionId: Int!
}