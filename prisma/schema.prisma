generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  login     String   @unique
  password  String
  firstName String
  name      String
  role      RoleEnum @default(STUDENT)
  rankId    Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  Rank Rank? @relation(fields: [rankId], references: [id])

  Achievement Achievement[]
  Testing     Testing[]
  Rating      Rating[]
}

model Rank {
  id   Int    @id @default(autoincrement())
  name String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  User User[]
}

model Disciplina {
  id        Int    @id @default(autoincrement())
  name      String
  shortName String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  Topic Topic[]
}

model Topic {
  id           Int    @id @default(autoincrement())
  name         String
  disciplinaId Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  Disciplina Disciplina? @relation(fields: [disciplinaId], references: [id])

  Question Question[]
  Testing  Testing[]
  Subtopic Subtopic[]
}

model Subtopic {
  id      Int    @id @default(autoincrement())
  name    String
  topicId Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  Topic Topic? @relation(fields: [topicId], references: [id])

  TheoryMaterial TheoryMaterial[]
}

model TheoryMaterial {
  id          Int     @id @default(autoincrement())
  url         String
  description String
  usage       Boolean
  subtopicId  Int?
  typeFileId  Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  TypeFile TypeFile? @relation(fields: [typeFileId], references: [id])
  Subtopic Subtopic? @relation(fields: [subtopicId], references: [id])
}

model PracticMaterial {
  id         Int    @id @default(autoincrement())
  url        String
  typeFileId Int?
  questionId Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  TypeFile TypeFile? @relation(fields: [typeFileId], references: [id])
  Question Question? @relation(fields: [questionId], references: [id])
}

model TypeFile {
  id   Int    @id @default(autoincrement())
  name String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  TheoryMaterial  TheoryMaterial[]
  PracticMaterial PracticMaterial[]
}

model TypeTask {
  id   Int    @id @default(autoincrement())
  name String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  Question Question[]
}

model TypeMiniGame {
  id   Int    @id @default(autoincrement())
  name String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  Question Question[]
}

model ScaleImportant {
  id         Int    @id @default(autoincrement())
  name       String
  equivalent Float

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  Question Question[]
}

model ScaleRecognition {
  id         Int    @id @default(autoincrement())
  name       String
  equivalent Float

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  ResultRecognition ResultRecognition[]
}

model ModelNS {
  id   Int    @id @default(autoincrement())
  name String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  ParameterNS   ParameterNS[]
  CalculationNS CalculationNS[]
}

model TypeReward {
  id   Int    @id @default(autoincrement())
  name String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  Reward Reward[]
}

model Reward {
  id           Int     @id @default(autoincrement())
  name         String
  description  String
  typeRewardId Int?
  url          String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  TypeReward TypeReward? @relation(fields: [typeRewardId], references: [id])

  Achievement Achievement[]
}

model Achievement {
  id       Int  @id @default(autoincrement())
  rewardId Int?
  userId   Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  Reward Reward? @relation(fields: [rewardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Question {
  id               Int    @id @default(autoincrement())
  text             String
  scaleImportantId Int?
  typeMiniGameId   Int?
  typeTaskId       Int?
  topicId          Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  ScaleImportant ScaleImportant? @relation(fields: [scaleImportantId], references: [id])
  TypeMiniGame   TypeMiniGame?   @relation(fields: [typeMiniGameId], references: [id])
  TypeTask       TypeTask?       @relation(fields: [typeTaskId], references: [id])
  Topic          Topic?          @relation(fields: [topicId], references: [id])

  ResponceTemplate ResponceTemplate[]
  Answer           Answer[]
  ResponceTesting  ResponceTesting[]
  PracticMaterial  PracticMaterial[]
}

model Testing {
  id      Int  @id @default(autoincrement())
  topicId Int?
  userId  Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  Topic Topic? @relation(fields: [topicId], references: [id])
  User  User?  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  ResponceTesting ResponceTesting[]
}

model Answer {
  id         Int     @id @default(autoincrement())
  text       String
  correct    String?
  questionId Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  FileAnswer FileAnswer?

  Question Question? @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model FileAnswer {
  id       Int    @id @default(autoincrement())
  url      String
  answerId Int    @unique

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  answer Answer @relation(fields: [answerId], references: [id])
}

model ResponceTesting {
  id         Int      @id @default(autoincrement())
  text       String
  time       DateTime
  correct    Boolean
  testingId  Int?
  questionId Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  Testing  Testing?  @relation(fields: [testingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Question Question? @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  ResultRecognition ResultRecognition[]
  CalculationNS     CalculationNS[]
}

model ResponceTemplate {
  id         Int    @id @default(autoincrement())
  text       String
  questionId Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  ResultRecognition ResultRecognition[]

  Question Question? @relation(fields: [questionId], references: [id])
}

model ResultRecognition {
  id                 Int    @id @default(autoincrement())
  text               String
  responceTemplateId Int?
  scaleRecognitionId Int?
  responceTestingId  Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  ResponceTemplate ResponceTemplate? @relation(fields: [responceTemplateId], references: [id])
  ScaleRecognition ScaleRecognition? @relation(fields: [scaleRecognitionId], references: [id])
  ResponceTesting  ResponceTesting?  @relation(fields: [responceTestingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ParameterNS {
  id        Int  @id @default(autoincrement())
  modelNSId Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  ModelNS ModelNS? @relation(fields: [modelNSId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model CalculationNS {
  id                Int  @id @default(autoincrement())
  result            Int
  modelNSId         Int?
  responceTestingId Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  ModelNS         ModelNS?         @relation(fields: [modelNSId], references: [id])
  ResponceTesting ResponceTesting? @relation(fields: [responceTestingId], references: [id])

  Rating Rating?
}

model Rating {
  id              Int  @id @default(autoincrement())
  calculationNSId Int  @unique
  userId          Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  CalculationNS CalculationNS @relation(fields: [calculationNSId], references: [id])
  User          User?         @relation(fields: [userId], references: [id])
}

enum RoleEnum {
  ADMIN
  TEACHER
  STUDENT
}
